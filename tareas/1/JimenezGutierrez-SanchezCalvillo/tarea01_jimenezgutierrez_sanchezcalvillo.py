# -*- coding: utf-8 -*-
"""Tarea01_JimenezGutierrez-SanchezCalvillo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sCWMa_yHditns9_Z8Na8DbOV7EWFtSKB
"""

"""
TAREA 1 SISTEMAS OPERATIVOS: Asignación de memoria
PROFESOR: ING. GUNNAR EYAL WOLF ISZAEVICH
ALUMNOS:
  Jimenez Gutierrez Axel Uriel
  Sanchez Calvillo Saida Mayela
"""

def main():
    continuar = 'S'
    asignacion = "AABBBBCCCCDDDDDDEEEE---HHHII--"
    print("Asignacion Actual:", asignacion)

    while continuar == 'S':
        accion = input("Asignar (0), Liberar (1), Salir (2): ")

        if accion == '0':  # Asignar
            guiones_consecutivos = encontrar_guiones_consecutivos_compact(asignacion)
            letra = input("Ingrese el proceso a añadir: ")
            tamano = int(input("Ingrese el tamaño de memoria del proceso a añadir (entre 2 y 15 unidades): "))

            if tamano < 2 or tamano > 15:
                print("Tamaño de proceso inválido. El tamaño debe estar entre 2 y 15 unidades.")
                continue

            if guiones_consecutivos >= tamano:
                asignacion = asignacion.replace('-', letra, tamano)
                print("Asignacion modificada:", asignacion)
            else:
                print("No hay espacio suficiente para añadir el proceso.")
                espacio = encontrar_guiones_consecutivos(asignacion)
                print("Se requiere asignar ", tamano, " unidades, solo hay ", espacio, " consecutivos")
                print("*Compactación requerida*")
                asignacion = compactar_asignacion(asignacion)
                print("Nueva situación:", asignacion)

                guiones_consecutivos = encontrar_guiones_consecutivos_compact(asignacion)

                if guiones_consecutivos >= tamano:
                    asignacion = asignacion.replace('-', letra, tamano)
                    print("Asignacion modificada:", asignacion)
                else:
                    print("Aunque se ha realizado la compactación, todavía no hay suficiente espacio para añadir el proceso. Libere otros.")

        elif accion == '1':  # Liberar
            letra_liberar = input("Ingrese el proceso a liberar: ")
            asignacion = asignacion.replace(letra_liberar, '-', asignacion.count(letra_liberar))
            print("Asignacion modificada:", asignacion)

        elif accion == '2':  # Salir
            print("Saliendo del programa...")
            break

        else:
            print("Acción no válida. Intente de nuevo.")

        continuar = input("¿Desea continuar? (S/N): ").upper()

        if continuar != 'S' and continuar != 'N':
            print("Entrada inválida. Saliendo del programa.")
            break

def encontrar_guiones_consecutivos(asignacion):
    guiones_consecutivos = 0
    max_guiones_consecutivos = 0

    for char in asignacion:
        if char == '-':
            guiones_consecutivos += 1
            max_guiones_consecutivos = max(max_guiones_consecutivos, guiones_consecutivos)
        else:
            guiones_consecutivos = 0

    return max_guiones_consecutivos

def encontrar_guiones_consecutivos_compact(asignacion):
    guiones_consecutivos = 0
    encontrado = False

    for char in asignacion:
        if char == '-' or encontrado:
            encontrado = True
            if char == '-':
                guiones_consecutivos += 1
            else:
                break  # Salimos del bucle al encontrar el primer carácter que no es '-'

    return guiones_consecutivos

def compactar_asignacion(asignacion):
    asignacion_compactada = asignacion.replace('-', '')
    num_guiones_agregados = len(asignacion) - len(asignacion_compactada)
    asignacion_compactada += '-' * num_guiones_agregados
    return asignacion_compactada

if __name__ == "__main__":
    main()